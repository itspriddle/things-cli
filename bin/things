#!/usr/bin/env bash
# Usage: things [GLOBAL OPTIONS...] <COMMAND> [ARGS...]
#
# NAME
#   things - manage todos with Things 3
#
# SYNOPSIS
#   things [GLOBAL OPTIONS...] <COMMAND> [ARGS...]
#
# DESCRIPTION
#   CLI interface for Things 3 by Cultured Code.
#
# COMMANDS
#   add            - add new todo
#   update         - update exiting todo
#   add-project    - add new project
#   update-project - update exiting project
#   show           - show an area, project, tag, or todo in Things
#   search         - invoke and show the search screen in Things
#   help           - show documentation for the given command
#
# GLOBAL OPTIONS
#   -V, --version
#     Print version information about things-cli and Things
#
#   --debug
#     Enable debug mode for things-cli.
#
# AUTHOR
#   Joshua Priddle <jpriddle@me.com>
#
# REPORTING BUGS
#   Issues can be reported on GitHub:
#
#   https://github.com/itspriddle/things-cli/issues
#
# LICENSE
#   MIT License
#
# SEE ALSO
#   https://culturedcode.com/things/support/articles/2803573/

# Enable debug mode
if [[ "$DEBUG" ]] || [[ "${1:-}" == "--debug" ]]; then
  [[ "${1:-}" == "--debug" ]] && shift
  export PS4='+ [${BASH_SOURCE##*/}:$LINENO] '
  set -x
fi

set -euo pipefail

# Usage: things help [COMMAND]
#
# NAME
#   things help - show help for things-cli and its subcommands
#
# SYNOPSIS
#   things help [COMMAND]
#
# DESCRIPTION
#   Prints documentation for things-cli commands.
help() {
  local cmd=$1 usage="${2:-}" pattern="^# Usage: ${0##*/}"

  if [[ "$cmd" == "-h" ]]; then
    cmd=
    usage=1
  fi

  [[ "$cmd" ]] && pattern="$pattern $cmd "

  if ! grep -q "$pattern" "$0"; then
    echo "Error: Invalid command \`${0##*/} $cmd'" >&2
    return 1
  fi

  awk \
    -v cmd="$cmd" \
    -v usage="$usage" \
    -v pattern="$pattern" \
    '
    $0 ~ pattern,/^[^#]/ {
      if ($1 == "#") {
        sub("^# ?", "", $0)
        print
        if (usage) exit
      } else {
        exit
      }
    }
    ' "$0" | format_help
}

# Usage: things add [OPTIONS...] [--] [-|TITLE]
#
# NAME
#   things add - add new todo
#
# SYNOPSIS
#   things add [OPTIONS...] [--] [-|TITLE]
#
# DESCRIPTION
#   Adds new todos to Things.
#
#   If `-` is given as a title, it is read from STDIN. When titles have
#   multiple lines of text, the first is set as the todo's title and the
#   remaining lines are set as the todo's notes. Notes set this way take
#   precedence over the `--notes=` option.
#
# OPTIONS
#   --canceled, --cancelled
#     Whether or not the todo should be set to canceled. Default: false. Takes
#     priority over completed.
#
#   --notes
#     The text to use for the notes field of the todo. Maximum unencoded
#     length: 10,000 characters.
#
#   --show-quick-entry
#     Whether or not to show the quick entry dialog (populated with the
#     provided data) instead of adding a new todo. Ignored if titles is
#     specified. Default: false.
#
#   --checklist-item=ITEM
#     Checklist item to be added to the todo. Can be specified multiple times
#     to create additional checklist items (maximum of 100).
#
#   --completed
#     Whether or not the todo should be set to complete. Default: false.
#     Ignored if canceled is also set to true.
#
#   --completion-date=<DATE>DATE
#     ISO8601 date time string. The date to set as the completion date for the
#     todo in the database. Ignored if the todo is not completed or canceled,
#     or if the date is in the future.
#
#   --creation-date=DATE
#     ISO8601 date time string. The date to set as the creation date for the
#     todo in the database. Ignored if the date is in the future.
#
#   --deadline=DATE
#     The deadline to apply to the todo.
#
#   --heading=HEADING
#     The title of a heading within a project to add to. Ignored if a project
#     is not specified, or if the heading doesn’t exist.
#
#   --list=LIST
#     The title of a project or area to add to. Ignored if list-id is present.
#
#   --list-id=ID
#     The ID of a project or area to add to. Takes precedence over list.
#
#   --reveal
#     Whether or not to navigate to and show the newly created todo. If
#     multiple todos have been created, the first one will be shown. Ignored
#     if show-quick-entry is also set to true. Default: false.
#
#   --tags=TAG1[,TAG2,TAG3...]
#     Comma separated strings corresponding to the titles of tags. Does not
#     apply a tag if the specified tag doesn’t exist.
#
#   --when=DATE|DATETIME
#     Possible values: today, tomorrow, evening, anytime, someday, a date
#     string, or a date time string. Using a date time string adds a reminder
#     for that time. The time component is ignored if anytime or someday is
#     specified.
#
#   --titles=TITLE1[,TITLE2,TITLE3...]
#     Use instead of title to create multiple todos. Takes priority over title
#     and show-quick-entry. The other parameters are applied to all the
#     created todos.
#
#   --use-clipboard=VALUE
#     Possible values can be replace-title (newlines overflow into notes,
#     replacing them), replace-notes, or replace-checklist-items (newlines
#     create multiple checklist rows). Takes priority over title, notes, or
#     checklist-items.
#
# EXAMPLES
#   things add "Finish add to Things script"
#
#   things add "Add a todo with notes
#
#   The first line of text is the note title and the rest of the text is
#   notes."
#
#   echo "Create a todo from STDIN" | things add -
#
#   things add -
#   Another way to create a todo from STDIN
#
#   I can type a long form note here for my todo, then press ctrl-d...
#   ^d
#
#   things add --deadline=2020-08-01 "Ship this script"
#
#   things add --when="2020-08-01 12:30:00" "Lunch time"
#
#   things add --show-quick-entry \
#     "Add a pending todo to the quick entry window"
add() {
  local url="things:///add?" \
    when deadline list list_id reveal show_quick_entry title titles notes \
    creation_date completion_date tags completed canceled heading raw_input \
    use_clipboard

  local -a checklist_items=() titles=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --when=?*) when="$(urlencode "${1#*=}")"; shift ;;
      --deadline=?*) deadline="$(urlencode "${1#*=}")"; shift ;;
      --completed) completed=1; shift ;;
      --canceled|--cancelled) canceled=1; shift ;;
      --checklist-item=?*) checklist_items+=("$(urlencode "${1#*=}")"); shift ;;
      --creation-date=?*) creation_date="$(urlencode "${1#*=}")"; shift ;;
      --completion-date=?*) completion_date="$(urlencode "${1#*=}")"; shift ;;
      --list=?*) list="$(urlencode "${1#*=}")"; shift ;;
      --list-id=?*) list_id="$(urlencode "${1#*=}")"; shift ;;
      --heading=?*) heading="$(urlencode "${1#*=}")"; shift ;;
      --reveal) reveal=1; shift ;;
      --show-quick-entry) show_quick_entry=1; shift ;;
      --notes=?*) notes="$(urlencode "${1#*=}")"; shift ;;
      --tags=?*) tags="$(urlencode "${1#*=}")"; shift ;;
      --titles=?*) IFS=',' read -ra titles <<< "${1#*=}"; shift ;;
      --use-clipboard=?*) use_clipboard="${1#*=}"; shift ;;
      -h | --help)
        help "${FUNCNAME[0]}" "$([[ "$1" == "-h" ]] && echo 1)"
        return 0
        ;;
      --)
        shift
        break
        ;;
      -?*)
        echo "Error: Invalid option \`$1'" >&2
        return 1
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ $# -eq 1 ]] && [[ $1 == "-" ]]; then
    raw_input="$(cat)"
  elif [[ $# -gt 0 ]]; then
    raw_input="$*"
  fi

  if [[ "$raw_input" ]] && [[ $(wc -l <<< "$raw_input") -gt 1 ]]; then
    title="$(urlencode "$(find_title "$raw_input")")"
    notes="$(urlencode "$(find_notes "$raw_input")")"
  elif [[ "$raw_input" ]]; then
    title="$(urlencode "$raw_input")"
  fi

  [[ -z "$title" ]] && show_quick_entry=1

  [[ "${#checklist_items[@]}" -gt 0 ]] &&
    url="${url}checklist-items=$(join "${checklist_items[@]}")&"

  [[ "$when" ]] && url="${url}when=$when&"

  [[ "$deadline" ]] && url="${url}deadline=$deadline&"

  if [[ "${#titles[@]}" -gt 0 ]]; then
    local i
    for (( i = 0; i < "${#titles[@]}"; i++ )); do
      titles[$i]="$(urlencode "${titles[$i]}")"
    done
    url="${url}titles=$(join "${titles[@]}")"
  elif [[ "$title" ]]; then
    url="${url}title=$title&"
  fi

  [[ "$notes" ]] && url="${url}notes=$notes&"

  [[ "$use_clipboard" ]] && url="${url}use-clipboard=$use_clipboard&"

  [[ "$heading" ]] && url="${url}heading=$heading&"

  [[ "$show_quick_entry" ]] && url="${url}show-quick-entry=true&"

  [[ "$reveal" ]] && url="${url}reveal=true&"

  [[ "$tags" ]] && url="${url}tags=$tags&"

  [[ "$creation_date" ]] && url="${url}creation-date=$creation_date&"

  [[ "$completion_date" ]] && url="${url}completion-date=$completion_date&"

  if [[ "$canceled" ]]; then
    url="${url}canceled=true&"
  elif [[ "$completed" ]]; then
    url="${url}completed=true&"
  fi

  if [[ "$list_id" ]]; then
    url="${url}list-id=$list_id&"
  elif [[ "$list" ]]; then
    url="${url}list=$list&"
  fi

  launch "$url"
}

# Usage: things add-project [OPTIONS...] [-|TITLE]
#
# NAME
#   things add-project - add new project
#
# SYNOPSIS
#   things add-project [OPTIONS...] [-|TITLE]
#
# DESCRIPTION
#   Adds a new project to Things.
#
#   If `-` is given as a title, it is read from STDIN. When titles have
#   multiple lines of text, the first is set as the todo's title and the
#   remaining lines are set as the todo's notes. Notes set this way take
#   precedence over the `--notes=` option.
#
# OPTIONS
#   --area-id=AREAID
#     The ID of an area to add to. Takes precedence over area. Optional.
#
#   --area=AREA
#     The title of an area to add to. Ignored if area-id is present. Optional.
#
#   --canceled, --cancelled
#     Whether or not the project should be set to canceled. Default: false.
#     Takes priority over completed. Will set all child todos to be canceled.
#     Optional.
#
#   --completed
#     Whether or not the project should be set to complete. Default: false.
#     Ignored if canceled is also set to true. Will set all child todos to be
#     completed. Optional.
#
#   --completion-date=DATE
#     ISO8601 date time string. The date to set as the completion date for the
#     project in the database. If the todos parameter is also specified, this
#     date is applied to them, too. Ignored if the todo is not completed or
#     canceled, or if the date is in the future. Optional.
#
#   --deadline=DATE
#     The deadline to apply to the project. Optional.
#
#   --notes=NOTES
#     The text to use for the notes field of the project. Maximum unencoded
#     length: 10,000 characters. Optional.
#
#   --reveal
#     Whether or not to navigate into the newly created project. Default:
#     false. Optional.
#
#   --tags=TAG1[,TAG2,TAG3...]
#     Comma separated strings corresponding to the titles of tags. Does not
#     apply a tag if the specified tag doesn’t exist. Optional.
#
#   --when=DATE|DATETIME
#     Possible values: today, tomorrow, evening, anytime, someday, a date
#     string, or a date time string. Using a date time string adds a reminder
#     for that time. The time component is ignored if anytime or someday is
#     specified. Optional.
#
#   --todo=TITLE
#     Title of a todo to add to the project. Can be specified more than once
#     to add multiple todos. Optional.
#
# EXAMPLES
#   things add-project "Take over the world"
add-project() {
  local url="things:///add-project?" \
    when deadline reveal title notes creation_date completion_date tags \
    completed canceled raw_input area area_id

  local -a todos=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --area-id=?*) area_id="$(urlencode "${1#*=}")"; shift ;;
      --area=?*) area="$(urlencode "${1#*=}")"; shift ;;
      --canceled|--cancelled) canceled=1; shift ;;
      --completed) completed=1; shift ;;
      --completion-date=?*) completion_date="$(urlencode "${1#*=}")"; shift ;;
      --creation-date=?*) creation_date="$(urlencode "${1#*=}")"; shift ;;
      --deadline=?*) deadline="$(urlencode "${1#*=}")"; shift ;;
      --notes=?*) notes="$(urlencode "${1#*=}")"; shift ;;
      --reveal) reveal=1; shift ;;
      --tags=?*) tags="$(urlencode "${1#*=}")"; shift ;;
      --when=?*) when="$(urlencode "${1#*=}")"; shift ;;
      --todo=?*) todos+=("$(urlencode "${1#*=}")"); shift ;;
      -h | --help)
        help "${FUNCNAME[0]}" "$([[ "$1" == "-h" ]] && echo 1)"
        return 0
        ;;
      --)
        shift
        break
        ;;
      -?*)
        echo "Error: Invalid option \`$1'" >&2
        return 1
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ $# -eq 1 ]] && [[ $1 == "-" ]]; then
    raw_input="$(cat)"
  elif [[ $# -gt 0 ]]; then
    raw_input="$*"
  fi

  if [[ "$raw_input" ]] && [[ $(wc -l <<< "$raw_input") -gt 1 ]]; then
    title="$(urlencode "$(find_title "$raw_input")")"
    notes="$(urlencode "$(find_notes "$raw_input")")"
  elif [[ "$raw_input" ]]; then
    title="$(urlencode "$raw_input")"
  fi

  [[ "$title" ]] && url="${url}title=$title&"

  [[ "$when" ]] && url="${url}when=$when&"

  [[ "$deadline" ]] && url="${url}deadline=$deadline&"

  [[ "${#todos[@]}" -gt 0 ]] && url="${url}to-dos=$(join "${todos[@]}")&"

  [[ "$reveal" ]] && url="${url}reveal=true&"

  [[ "$tags" ]] && url="${url}tags=$tags&"

  [[ "$notes" ]] && url="${url}notes=${notes}&"

  [[ "$creation_date" ]] && url="${url}creation-date=$creation_date&"

  [[ "$completion_date" ]] && url="${url}completion-date=$completion_date&"

  if [[ "$canceled" ]]; then
    url="${url}canceled=true&"
  elif [[ "$completed" ]]; then
    url="${url}completed=true&"
  fi

  if [[ "$area_id" ]]; then
    url="${url}area-id=$area_id&"
  elif [[ "$area" ]]; then
    url="${url}area=$area&"
  fi

  launch "$url"
}

# Usage: things show [OPTIONS...] [--] [-|QUERY]
#
# NAME
#   things show -- show an area, project, tag, or todo in Things
#
# SYNOPSIS
#   things show [--filter=<filter>] --id=ID
#   things show [--filter=<filter>] [--] <-|QUERY>
#
# DESCRIPTION
#   Navigate to and show an area, project, tag or todo, or one of the
#   built-in lists, optionally filtering by one or more tags.
#
#   If `-` is given as a query, it is read from STDIN.
#
# OPTIONS
#   --filter=FILTER
#     Comma separated strings corresponding to the titles of tags that the
#     list should be filtered by.
#
#   --id=ID
#     The ID of an area, project, tag or todo to show; or one of the following
#     built-in list IDs: inbox, today, anytime, upcoming, someday, logbook,
#     tomorrow, deadlines, repeating, all-projects, logged-projects. Takes
#     precedence over QUERY. Required if QUERY is not supplied.
#
# EXAMPLES
#   things show today
#
#   things show inbox
#
#   echo logbook | things show -
#
#   things show -
#   upcoming
#   ^d
show() {
  local url="things:///show?" id query filter

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --filter=?*) filter="$(urlencode "${1#*=}")"; shift ;;
      --id=?*) id="$(urlencode "${1#*=}")"; shift ;;
      -h | --help)
        help "${FUNCNAME[0]}" "$([[ "$1" == "-h" ]] && echo 1)"
        return 0
        ;;
      --) shift; break ;;
      -?*) echo "Error: Invalid option \`$1'" >&2; return 1 ;;
      *) break ;;
    esac
  done

  if [[ $# -eq 1 ]] && [[ $1 == "-" ]]; then
    query="$(urlencode "$(cat)")"
  elif [[ $# -gt 0 ]]; then
    query="$(urlencode "$*")"
  fi

  if [[ "$id" ]]; then
    url="${url}id=$id&"
  elif [[ "$query" ]]; then
    url="${url}query=$query&"
  else
    echo "Error: Must specify --id=ID or query" >&2
    return 1
  fi

  [[ "$filter" ]] && url="${url}filter=$filter&"

  launch "$url"
}

# Usage: things search [--] [-|QUERY]
#
# NAME
#   things search - search for items in things
#
# SYNOPSIS
#   things search
#   things search [--] <-|QUERY>
#
# DESCRIPTION
#   Searches things for the specified query. if no query is specified, opens
#   the search window.
#
#   If `-` is given as a query, it is read from STDIN.
#
# EXAMPLES
#   XXX
search() {
  local url="things:///search?" query

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help)
        help "${FUNCNAME[0]}" "$([[ "$1" == "-h" ]] && echo 1)"
        return 0
        ;;
      --)
        shift
        break
        ;;
      -?*)
        echo "Error: Invalid option \`$1'" >&2
        return 1
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ $# -eq 1 ]] && [[ $1 == "-" ]]; then
    url="${url}query=$(urlencode "$(cat)")"
  elif [[ $# -gt 0 ]]; then
    url="${url}query=$(urlencode "$*")"
  fi

  launch "$url"
}

# Usage: things update [OPTIONS...] [--] [-|TITLE]
#
# NAME
#   things update - updated existing todos
#
# SYNOPSIS
#   things update [OPTIONS...] [--] [-|TITLE]
#
# DESCRIPTION
#   Updates an existing todo identified by `--id=`.
#
#   If `-` is given as a title, it is read from STDIN. When titles have
#   multiple lines of text, the first is set as the todo's title and the
#   remaining lines are set as the todo's notes. Notes set this way take
#   precedence over the `--notes=` option.
#
# OPTIONS
#   --auth-token=TOKEN
#      The Things URL scheme authorization token. Required. See below for more
#      information on authorization.
#
#   --id=ID
#     The ID of the todo to update. Required.
#
#   --notes=NOTES
#     The notes of the todo. This will replace the existing notes. Maximum
#     unencoded length: 10,000 characters. Optional.
#
#   --prepend-notes=NOTES
#     Text to add before the existing notes of a todo. Maximum unencoded
#     length: 10,000 characters. Optional.
#
#   --append-notes=NOTES
#     Text to add after the existing notes of a todo. Maximum unencoded
#     length: 10,000 characters. Optional.
#
#   --when=DATE|DATETIME
#     Set the when field of a todo. Possible values: today, tomorrow,
#     evening, someday, a date string, or a date time string. Including a time
#     adds a reminder for that time. The time component is ignored if someday
#     is specified. This field cannot be updated on repeating todo.
#     Optional.
#
#   --deadline=DATE
#     The deadline to apply to the todo. This field cannot be updated on
#     repeating todo. Optional.
#
#   --tags=TAG1[,TAG2,TAG3...]
#     Comma separated strings corresponding to the titles of tags. Replaces
#     all current tags. Does not apply a tag if the specified tag doesn’t
#     exist. Optional.
#
#   --add-tags=TAG1[,TAG2,TAG3...]
#     Comma separated strings corresponding to the titles of tags. Adds the
#     specified tags to a todo. Does not apply a tag if the specified tag
#     doesn’t exist. Optional.
#
#   --completed
#     Complete a todo or set a todo to incomplete. Ignored if canceled is also
#     set to true. Setting completed=false on a canceled todo will also mark
#     it as incomplete. This field cannot be updated on repeating todos.
#     Optional.
#
#   --canceled, --cancelled
#     Cancel a todo or set a todo to incomplete. Takes priority over
#     completed. Setting canceled=false on a completed todo will also mark it
#     as incomplete. This field cannot be updated on repeating todos.
#
#   --reveal
#     Whether or not to navigate to and show the updated todo. Default: false.
#     Optional.
#
#   --duplicate
#     Set to true to duplicate the todo before updating it, leaving the
#     original todo untouched. Repeating todo cannot be duplicated. Default:
#     false. Optional.
#
#   --completion-date=DATE
#     ISO8601 date time string. Set the creation date for the todo in the
#     database. Ignored if the date is in the future. Optional.
#
#   --creation-date=DATE
#     ISO8601 date time string. Set the completion date for the todo in the
#     database. Ignored if the todo is not completed or canceled, or if the
#     date is in the future. This field cannot be updated on repeating
#     todo. Optional.
#
#   --heading=HEADING
#     The title of a heading within a project to move the todo to. Ignored if
#     the todo is not in a project with the specified heading. Can be used
#     together with list or list-id.
#
#   --list=LIST
#     The title of a project or area to move the todo into. Ignored if
#     `--list-id=` is present.
#
#   --list-id=LISTID
#     The ID of a project or area to move the todo into. Takes precedence
#     over `--list=`.
#
#   --checklist-item=ITEM
#     Checklist items of the todo (maximum of 100). Will replace all existing
#     checklist items. Can be specified multiple times on the command line.
#
#   --prepend-checklist-item=ITEM
#     Add checklist items to the front of the list of checklist items in the
#     todo (maximum of 100). Can be specified multiple times on the command
#     line.
#
#   --append-checklist-item=ITEM
#     Add checklist items to the end of the list of checklist items in the
#     todo (maximum of 100). Can be specified multiple times on the command
#     line.
#
# EXAMPLES
#   XXX
#
# SEE ALSO
#   Authorization: https://culturedcode.com/things/support/articles/2803573/#overview-authorization
update() {
  local url="things:///update?" \
    auth_token id notes append_notes prepend_notes when deadline tags \
    add_tags completed canceled reveal duplicate completion_date creation_date \
    heading list list_id checklist_items raw_input title

  local -a checklist_items=() prepend_checklist_items=() \
    append_checklist_items=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --auth-token=?*) auth_token="$(urlencode "${1#*=}")"; shift ;;
      --id=?*) id="$(urlencode "${1#*=}")"; shift ;;
      --notes=?*) notes="$(urlencode "${1#*=}")"; shift ;;
      --prepend-notes=?*) prepend_notes="$(urlencode "${1#*=}")"; shift ;;
      --append-notes=?*) append_notes="$(urlencode "${1#*=}")"; shift ;;
      --when=?*) when="$(urlencode "${1#*=}")"; shift ;;
      --deadline=?*) deadline="$(urlencode "${1#*=}")"; shift ;;
      --tags=?*) tags="$(urlencode "${1#*=}")"; shift ;;
      --add-tags=?*) add_tags="$(urlencode "${1#*=}")"; shift ;;
      --heading=?*) heading="$(urlencode "${1#*=}")"; shift ;;
      --list=?*) list="$(urlencode "${1#*=}")"; shift ;;
      --list-id=?*) list_id="$(urlencode "${1#*=}")"; shift ;;
      --completed) completed=1; shift ;;
      --canceled|--cancelled) canceled=1; shift ;;
      --reveal) reveal=1; shift ;;
      --duplicate) duplicate=1; shift ;;
      --completion-date=?*) completion_date="$(urlencode "${1#*=}")"; shift ;;
      --creation-date=?*) creation_date="$(urlencode "${1#*=}")"; shift ;;
      --checklist-item=?*) checklist_items+=("$(urlencode "${1#*=}")"); shift ;;
      --append-checklist-item=?*) append_checklist_items+=("$(urlencode "${1#*=}")"); shift ;;
      --prepend-checklist-item=?*) prepend_checklist_items+=("$(urlencode "${1#*=}")"); shift ;;
      -h | --help)
        help "${FUNCNAME[0]}" "$([[ "$1" == "-h" ]] && echo 1)"
        return 0
        ;;
      --)
        shift
        break
        ;;
      -?*)
        echo "Error: Invalid option \`$1'" >&2
        return 1
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ "$auth_token" ]]; then
    url="${url}auth-token=$auth_token&"
  else
    echo "Error: Must specify --auth-token=token" >&2
    return 1
  fi

  if [[ "$id" ]]; then
    url="${url}id=$id&"
  else
    echo "Error: Must specify --id=id" >&2
    return 1
  fi

  if [[ $# -eq 1 ]] && [[ $1 == "-" ]]; then
    raw_input="$(cat)"
  elif [[ $# -gt 0 ]]; then
    raw_input="$*"
  fi

  if [[ "$raw_input" ]] && [[ $(wc -l <<< "$raw_input") -gt 1 ]]; then
    title="$(urlencode "$(find_title "$raw_input")")"
    notes="$(urlencode "$(find_notes "$raw_input")")"
  elif [[ "$raw_input" ]]; then
    title="$(urlencode "$raw_input")"
  fi

  [[ "$title" ]] && url="${url}title=$title&"

  [[ "${#checklist_items[@]}" -gt 0 ]] &&
    url="${url}checklist-items=$(join "${checklist_items[@]}")&"

  [[ "${#prepend_checklist_items[@]}" -gt 0 ]] &&
    url="${url}prepend-checklist-items=$(join "${prepend_checklist_items[@]}")&"

  [[ "${#append_checklist_items[@]}" -gt 0 ]] &&
    url="${url}append-checklist-items=$(join "${append_checklist_items[@]}")&"

  [[ "$prepend_notes" ]] && url="${url}prepend-notes=$prepend_notes&"

  [[ "$append_notes" ]] && url="${url}append-notes=$append_notes&"

  [[ "$heading" ]] && url="${url}heading=$heading&"

  [[ "$duplicate" ]] && url="${url}duplicate=true&"

  [[ "$when" ]] && url="${url}when=$when&"

  [[ "$deadline" ]] && url="${url}deadline=$deadline&"

  [[ "$reveal" ]] && url="${url}reveal=true&"

  [[ "$tags" ]] && url="${url}tags=$tags&"

  [[ "$add_tags" ]] && url="${url}add-tags=$add_tags&"

  [[ "$notes" ]] && url="${url}notes=$notes&"

  [[ "$creation_date" ]] && url="${url}creation-date=$creation_date&"

  [[ "$completion_date" ]] && url="${url}completion-date=$completion_date&"

  if [[ "$canceled" ]]; then
    url="${url}canceled=true&"
  elif [[ "$completed" ]]; then
    url="${url}completed=true&"
  fi

  if [[ "$list_id" ]]; then
    url="${url}list-id=$list_id&"
  elif [[ "$list" ]]; then
    url="${url}list=$list&"
  fi

  launch "$url"
}

# Usage: things update-project [OPTIONS...] [--] [-|TITLE]
#
# NAME
#   things update-project - update an existing project
#
# SYNOPSIS
#   things update-project [OPTIONS...] [--] [-|TITLE]
#
# DESCRIPTION
#   Updates an existing project identified by `--id=`.
#
#   If `-` is given as a title, it is read from STDIN. When titles have
#   multiple lines of text, the first is set as the project's title and the
#   remaining lines are set as the project's notes. Notes set this way take
#   precedence over the `--notes=` option.
#
# OPTIONS
#   --auth-token=TOKEN
#      The Things URL scheme authorization token. Required. See below for more
#      information on authorization.
#
#   --id=ID
#     The ID of the project to update. Required.
#
#   --notes=NOTES
#     The notes of the project. This will replace the existing notes. Maximum
#     unencoded length: 10,000 characters. Optional.
#
#   --prepend-notes=NOTES
#     Text to add before the existing notes of a project. Maximum unencoded
#     length: 10,000 characters. Optional.
#
#   --append-notes=NOTES
#     Text to add after the existing notes of a project. Maximum unencoded
#     length: 10,000 characters. Optional.
#
#   --when=DATE|DATETIME
#     Set the when field of a project. Possible values: today, tomorrow,
#     evening, someday, a date string, or a date time string. Including a time
#     adds a reminder for that time. The time component is ignored if someday
#     is specified. This field cannot be updated on repeating projects.
#     Optional.
#
#   --deadline=DATE
#     The deadline to apply to the project. This field cannot be updated on
#     repeating projects. Optional.
#
#   --tags=TAG1[,TAG2,TAG3...]
#     Comma separated strings corresponding to the titles of tags. Replaces
#     all current tags. Does not apply a tag if the specified tag doesn’t
#     exist. Optional.
#
#   --add-tags=TAG1[,TAG2,TAG3...]
#     Comma separated strings corresponding to the titles of tags. Adds the
#     specified tags to a project. Does not apply a tag if the specified tag
#     doesn’t exist. Optional.
#
#   --area=AREA
#     The ID of an area to move the project into. Takes precedence over
#     `--area=`. Optional.
#
#   --area-id=AREAID
#     The title of an area to move the project into. Ignored if `--area-id=`
#     is present. Optional.
#
#   --completed
#     Complete a project or set a project to incomplete. Ignored if canceled
#     is also set to true. Setting to true will be ignored unless all child
#     todos are completed or canceled and all child headings archived. Setting
#     to false on a canceled project will mark it as incomplete. This field
#     cannot be updated on repeating projects. Optional.
#
#   --canceled, --cancelled
#     Cancel a project or set a project to incomplete. Takes priority over
#     completed. Setting to true will be ignored unless all child todos are
#     completed or canceled and all child headings archived. Setting to false
#     on a completed project will mark it as incomplete. This field cannot be
#     updated on repeating projects. Optional.
#
#   --reveal
#     Whether or not to navigate to and show the updated project. Default:
#     false. Optional.
#
#   --duplicate
#     Set to true to duplicate the project before updating it, leaving the
#     original project untouched. Repeating projects cannot be duplicated.
#     Default: false. Optional.
#
#   --completion-date=DATE
#     ISO8601 date time string. Set the creation date for the project in the
#     database. Ignored if the date is in the future. Optional.
#
#   --creation-date=DATE
#     ISO8601 date time string. Set the completion date for the project in the
#     database. Ignored if the project is not completed or canceled, or if the
#     date is in the future. This field cannot be updated on repeating
#     projects. Optional.
#
#   --todo=TITLE
#     Title of a todo to add to the project. Can be specified more than once
#     to add multiple todos. Optional.
#
# EXAMPLES
#   XXX
#
# SEE ALSO
#   Authorization: https://culturedcode.com/things/support/articles/2803573/#overview-authorization
update-project() {
  local url="things:///update-project?" \
    auth_token id notes append_notes prepend_notes when deadline tags \
    add_tags area_id  area completed canceled reveal duplicate \
    completion_date creation_date raw_input title

  local -a todos=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --auth-token=?*) auth_token="$(urlencode "${1#*=}")"; shift ;;
      --id=?*) id="$(urlencode "${1#*=}")"; shift ;;
      --notes=?*) notes="$(urlencode "${1#*=}")"; shift ;;
      --prepend-notes=?*) prepend_notes="$(urlencode "${1#*=}")"; shift ;;
      --append-notes=?*) append_notes="$(urlencode "${1#*=}")"; shift ;;
      --when=?*) when="$(urlencode "${1#*=}")"; shift ;;
      --deadline=?*) deadline="$(urlencode "${1#*=}")"; shift ;;
      --tags=?*) tags="$(urlencode "${1#*=}")"; shift ;;
      --add-tags=?*) add_tags="$(urlencode "${1#*=}")"; shift ;;
      --area-id=?*) area_id="$(urlencode "${1#*=}")"; shift ;;
      --area=?*) area="$(urlencode "${1#*=}")"; shift ;;
      --completed) completed=1; shift ;;
      --canceled|--cancelled) canceled=1; shift ;;
      --reveal) reveal=1; shift ;;
      --duplicate) duplicate=1; shift ;;
      --completion-date=?*) completion_date="$(urlencode "${1#*=}")"; shift ;;
      --creation-date=?*) creation_date="$(urlencode "${1#*=}")"; shift ;;
      --todo=?*) todos+=("$(urlencode "${1#*=}")"); shift ;;
      -h | --help)
        help "${FUNCNAME[0]}" "$([[ "$1" == "-h" ]] && echo 1)"
        return 0
        ;;
      --)
        shift
        break
        ;;
      -?*)
        echo "Error: Invalid option \`$1'" >&2
        return 1
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ "$auth_token" ]]; then
    url="${url}auth-token=$auth_token&"
  else
    echo "Error: Must specify --auth-token=token" >&2
    return 1
  fi

  if [[ "$id" ]]; then
    url="${url}id=$id&"
  else
    echo "Error: Must specify --id=id" >&2
    return 1
  fi

  if [[ $# -eq 1 ]] && [[ $1 == "-" ]]; then
    raw_input="$(cat)"
  elif [[ $# -gt 0 ]]; then
    raw_input="$*"
  fi

  if [[ "$raw_input" ]] && [[ $(wc -l <<< "$raw_input") -gt 1 ]]; then
    title="$(urlencode "$(find_title "$raw_input")")"
    notes="$(urlencode "$(find_notes "$raw_input")")"
  elif [[ "$raw_input" ]]; then
    title="$(urlencode "$raw_input")"
  fi

  [[ "$title" ]] && url="${url}title=$title&"

  [[ "$prepend_notes" ]] && url="${url}prepend-notes=$prepend_notes&"

  [[ "$append_notes" ]] && url="${url}append-notes=$append_notes&"

  [[ "$duplicate" ]] && url="${url}duplicate=true&"

  [[ "$when" ]] && url="${url}when=$when&"

  [[ "$deadline" ]] && url="${url}deadline=$deadline&"

  [[ "${#todos[@]}" -gt 0 ]] && url="${url}to-dos=$(join "${todos[@]}")&"

  [[ "$reveal" ]] && url="${url}reveal=true&"

  [[ "$tags" ]] && url="${url}tags=$tags&"

  [[ "$add_tags" ]] && url="${url}add-tags=$add_tags&"

  [[ "$notes" ]] && url="${url}notes=$notes&"

  [[ "$creation_date" ]] && url="${url}creation-date=$creation_date&"

  [[ "$completion_date" ]] && url="${url}completion-date=$completion_date&"

  if [[ "$canceled" ]]; then
    url="${url}canceled=true&"
  elif [[ "$completed" ]]; then
    url="${url}completed=true&"
  fi

  if [[ "$area_id" ]]; then
    url="${url}area-id=$area_id&"
  elif [[ "$area" ]]; then
    url="${url}area=$area&"
  fi

  launch "$url"
}

# URL encodes the given string
#
# $1 - string to encode
urlencode() {
  local LC_ALL=C

  for (( i = 0; i < ${#1}; i++ )); do
    : "${1:i:1}"
    case "$_" in
      [a-zA-Z0-9.~_-]) printf '%s' "$_" ;;
      *) printf '%%%02X' "'$_" ;;
    esac
  done

  printf '\n'
}

# Finds the title in the given string (ie: the first line).
#
# $1 - message
find_title() {
  sed -n "1p" <<< "$1"
}

# Finds the notes in the given string (ie: all but the first line). Note that
# leading/trailing blank lines are stripped too.
#
# $1 - Message
find_notes() {
  sed -n "1d;p" <<< "$1" | trim_whitespace
}

# Trims blank lines from the beginning and end of STDIN.
trim_whitespace() {
  awk '
    /[[:graph:]]/ { p=1; for (i=1; i<=n; i++) print ""; n=0; print; }
    p && /^[[:space:]]*$/ { n++ }
  '
}

# Launches Things via `open` with the given arguments. For debugging purposes,
# you can override this with the `OPEN` environment variable,
# e.g. `OPEN=echo things ...`
#
# $@ - arguments to pass to open program.
launch() {
  : "${OPEN:=open}"

  if ! type "$OPEN" &> /dev/null; then
    echo "Error: \`open' not found. Is this a Mac?" >&2
    return 1
  fi

  "$OPEN" "$@"
}

# Joins the given arguments with "%0A" to format multiline entries for Things.
#
# $@ - strings to join
join() {
  local output

  output="$(printf "%s%%0A" "$@")"

  echo "${output%\%0A}"
}

# Formats help text supplied on STDIN. If this script is being
# piped/redirected, no special formatting is done.
format_help() {
  if [[ -t 1 ]]; then
    sed -E "s/^([A-Z0-9][A-Z0-9 ]+)\$/$(tput bold)\\1$(tput sgr0)/"
  else
    cat
  fi
}

# Prints version information for Things.
things_version() {
  defaults read /Applications/Things3.app/Contents/Info CFBundleShortVersionString 2> /dev/null ||
    echo UNKNOWN
}

main() {
  local cmd="${1:-}"

  shift

  case "$cmd" in
    "" | help | -h | --help)
      help "${1:-}" "$([[ "$cmd" == "-h" ]] && echo 1)"
      return 0
      ;;
    add|add-project|update|update-project|show|search)
      "$cmd" "$@"
      return $?
      ;;
    -V|--version)
      echo "things-cli"
      echo "  - Version:  v0.1.0"
      echo "  - Author:   Joshua Priddle <jpriddle@me.com>"
      echo "  - Homepage: https://github.com/itspriddle/things-cli"
      echo "  - License:  MIT"
      echo
      echo "Things3.app"
      echo "  - Version:  $(things_version)"
      echo "  - Homepage: https://culturedcode.com/things/"
      return 0
      ;;
    -?*)
      echo "Error: Invalid option \`$cmd'" >&2
      return 1
      ;;
    *)
      echo "Error: Invalid command \`things $cmd'" >&2
      return 1
      ;;
  esac
}

main "${@:-help}"
